import type { GetServerSidePropsContext, InferGetServerSidePropsType, NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";
import { formatRelative } from "date-fns";

import { NavButtons } from "@/components/nav-buttons";
import { SignIn } from "@/components/sign-in";
import { getAuthSession } from "@/server/common/get-server-session";
import { octokit } from "@/server/github/octokit";
import { trpc } from "@/utils/trpc";
import { Fragment } from "react";

const RepoActionSection: React.FC<{ owner: string; repo: string }> = ({ owner, repo }) => {
  const repoData = trpc.proxy.github.getRepoData.useQuery({ owner, repo });
  return (
    <div className="w-full px-4 py-4 shadow-lg">
      <h2 className="text-xl font-semibold">Branches</h2>
      <div className="flex w-full items-center justify-center pt-6 text-lg">
        {repoData.data?.branches ? (
          <div className="flex w-full flex-col">
            <div className="grid w-full grid-cols-2 gap-2">
              {repoData.data.branches.map((branch) => {
                return (
                  <Fragment key={branch.commit.sha}>
                    <div className="flex items-center gap-2 px-3 py-2 shadow ">
                      <div className="flex items-center">
                        <input
                          id="default-checkbox"
                          type="checkbox"
                          value=""
                          className="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-blue-600"
                        />
                        <label
                          htmlFor="default-checkbox"
                          className="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300"
                        >
                          {branch.name}
                        </label>
                      </div>
                    </div>
                  </Fragment>
                );
              })}
            </div>
            <button className="ease rounded bg-cyan-300 px-2 py-1 text-sm transition duration-300 hover:bg-cyan-400">
              Target PRs
            </button>
          </div>
        ) : (
          <p>Loading..</p>
        )}
      </div>
    </div>
  );
};

const CreatePrPageContent: React.FC<{ owner: string; repo: string }> = ({ owner, repo }) => {
  const { data: sesh } = useSession();

  if (!sesh) {
    return <SignIn />;
  }

  return (
    <div className="flex min-h-0 w-full flex-1 flex-col">
      <div className="flex w-full items-center justify-between py-4 px-8 shadow">
        <h1 className="flex items-center gap-2 text-2xl font-semibold">
          {sesh.user?.image && (
            <img src={sesh.user?.image} alt="pro pic" className="w-16 rounded-full" />
          )}
          {sesh.user?.name}
        </h1>
        <NavButtons />
      </div>

      <RepoActionSection owner={owner} repo={repo} />
    </div>
  );
};

export const getServerSideProps = async ({ query, req, res }: GetServerSidePropsContext) => {
  if (
    !query ||
    !query.repo ||
    typeof query.repo !== "string" ||
    !query.owner ||
    typeof query.owner !== "string"
  ) {
    console.error("Get bad query", query);
    return { props: {}, notFound: true };
  }

  const { repo, owner } = query;

  const session = await getAuthSession({ req, res });
  if (!session) {
    console.error("Got no session");
    return { props: {}, notFound: true };
  }

  const account = await prisma?.account.findFirst({
    where: { userId: session.user?.id },
    select: { access_token: true },
  });
  if (!account?.access_token) {
    console.error("Got no access token");
    return { props: {}, notFound: true };
  }

  const responseRepo = await octokit.rest.repos.get({
    headers: { authorization: `token ${account?.access_token}` },
    owner,
    repo,
  });

  if (!responseRepo.data) {
    console.error("Got no GitHub response");
    return { props: {}, notFound: true };
  }

  return { props: { session: session, repo, owner, fullRepo: responseRepo.data } };
};

const CreatePrPage: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = (props) => {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          Devtools
        </h1>

        {props.owner && <CreatePrPageContent owner={props.owner} repo={props.repo} />}
      </main>
    </>
  );
};

export default CreatePrPage;
